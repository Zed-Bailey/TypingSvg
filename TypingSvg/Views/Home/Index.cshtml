@{
    ViewData["Title"] = "Editor";
}



<div class="container">
    <div class="row">
        <div class="col">
            <h4>Edit SVG properties</h4>
            <hr/>
            
            <div class="row mb-3">
                <div class="col">
                    <label for="Width" class="form-label">Width</label>
                    <input class="form-control" id="Width" placeholder="500" value="500">
                </div>
                
                <div class="col">
                    <label for="Height" class="form-label">Height</label>
                    <input class="form-control" id="Height" placeholder="50" value="50">
                </div>
                
                
            </div>
            

            <div class="mb-3">
                <label for="fontSize" class="form-label">Font Size</label>
                <input class="form-control" id="fontSize" placeholder="20" value="20">
            </div>


            <div class="mb-3">
                <label for="Lines" class="form-label">Lines</label>
                <textarea class="form-control" id="Lines" rows="3">Hello World</textarea>
            </div>

            <div class="mb-3">
                <label for="lineTime" class="form-label">Duration (ms per line)</label>
                <input class="form-control" id="lineTime" placeholder="5000" value="5000">
            </div>

            <div class="mb-3">
                <label for="pauseTime" class="form-label">Pause (ms after line)</label>
                <input class="form-control" id="pauseTime" placeholder="1000" value="1000">
            </div>
            
            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" checked id="repeat">
                <label class="form-check-label" for="repeat">
                    Repeat
                </label>
            </div>
            


            <div class="row mb-3">
                <div class="col">
                    <label for="fontColour" class="form-label">Font Colour</label>
                    <input type="text" data-coloris id="fontColour" value="#36BCF7"/>
                </div>

                <div class="col">
                    <label for="backgroundColour" class="form-label">Background Colour</label>
                    <input type="text" data-coloris value="#00000000" id="backgroundColour"/>
                </div>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="horizontalCenter">
                <label class="form-check-label" for="horizontalCenter">
                    Center Horizontally
                </label>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="verticalCenter">
                <label class="form-check-label" for="verticalCenter">
                    Center Vertically
                </label>
            </div>


            <hr/>
            
            <div class="d-flex flex-row justify-content-center">
                <button onclick="generate()" class="btn btn-lg btn-primary rounded-3">Generate</button>    
            </div>
            



        </div>

        <div class="col">
            <h4>Preview SVG</h4>
            <hr/>
            <div>
                <img id="generated" src="" alt="typing svg" class=""/>
            </div>
            <div class="form-check mt-2">
                <label for="showBorder" class="form-check-label">Show Border</label>
                <input type="checkbox" id="showBorder" class="form-check-input"/>
            </div>
            
            <h4 class="mt-4">Generated Link</h4>
            <hr/>
            <a id="generatedLink"></a>
        </div>
    </div>
</div>


@section Scripts
{ 
    @* Colour picker *@
    <link rel="stylesheet" href="/lib/coloris/coloris.min.css"/>
    <script src="/lib/coloris/coloris.min.js"></script>
    
    <style>
        .bordered {
            border: 3px dashed red;
        }
    </style>
    
    
    <script type="text/javascript">
    window.addEventListener("load", () => {
        generate();
        let img = document.getElementById("generated");
        let borderToggle = document.getElementById("showBorder");
        borderToggle.addEventListener("change", () => {
            if (borderToggle.checked) {
                img.classList.add("bordered");
            } else {
                img.classList.remove("bordered");
            }
        });
    });
    
    

    // parse the input text, replaces spaces with '+' and seperates lines by ';'
    function parseLines () {
        let textArea = document.getElementById("Lines");
        let text = textArea.value.replaceAll(' ', '+').split('\n');
        return text.join(';');
    }

    function generate() {
        let ele = document.getElementById("generated");
        
        let lines = parseLines();
        
        //
        let width = document.getElementById("Width").value;
        let height = document.getElementById("Height").value;
        let fontColour = document.getElementById("fontColour").value.replace('#', '');
        let backgroundColour = document.getElementById("backgroundColour").value.replace('#', '');
        let pause = document.getElementById("pauseTime").value;
        let duration = document.getElementById("lineTime").value;
        let horizontalCenter = document.getElementById("horizontalCenter").checked;
        let verticalCenter = document.getElementById("verticalCenter").checked;
        let fontSize = document.getElementById("fontSize").value;
        let repeat = document.getElementById("repeat").checked;
        
        let queryParamData = {
            height: height,
            width: width,
            lines: lines,
            fontColour: fontColour,
            backgroundColour: backgroundColour,
            pause: pause,
            duration: duration,
            hcenter: horizontalCenter,
            vcenter: verticalCenter,
            fontSize: fontSize,
            repeat: repeat
        };
        
        let queryParams = new URLSearchParams(queryParamData);
        // replaces the encoded '+' with '+' again
        // does the same with the semi colon
        let queryParamsEncoded = queryParams.toString().replace(/%3B/g, ";").replace(/%2B/g, "+");
        let link = `/Typing?${queryParamsEncoded}`;
        
        ele.src = link;
        document.getElementById("generatedLink").innerHTML = window.location.origin + link;
        document.getElementById("generatedLink").href = window.location.origin + link;
        
    }


</script>
}